"use strict";(self.webpackChunkapi_docs=self.webpackChunkapi_docs||[]).push([[57624],{29157:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=r(85893),n=r(11151);const o={},i=void 0,a={id:"node-tracker/markdown/node-tracker.emitterconfigurationbase",title:"node-tracker.emitterconfigurationbase",description:"Home &gt; @snowplow/node-tracker &gt; EmitterConfigurationBase",source:"@site/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.md",sourceDirName:"node-tracker/markdown",slug:"/node-tracker/markdown/node-tracker.emitterconfigurationbase",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"node-tracker.emitterconfigurationbase.maxpostbytes",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.maxpostbytes"},next:{title:"node-tracker.emitterconfigurationbase.onrequestfailure",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.onrequestfailure"}},c={},d=[{value:"EmitterConfigurationBase interface",id:"emitterconfigurationbase-interface",level:2},{value:"Properties",id:"properties",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/",children:"Home"})," > ",(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker",children:"@snowplow/node-tracker"})," > ",(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase",children:"EmitterConfigurationBase"})]}),"\n",(0,s.jsx)(t.h2,{id:"emitterconfigurationbase-interface",children:"EmitterConfigurationBase interface"}),"\n",(0,s.jsx)("b",{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"interface EmitterConfigurationBase \n"})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.buffersize",children:"bufferSize?"})}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," The amount of events that should be buffered before sending Recommended to leave as 1 to reduce change of losing events"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.connectiontimeout",children:"connectionTimeout?"})}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," How long to wait before aborting requests to the collector"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.credentials",children:"credentials?"})}),(0,s.jsx)(t.td,{children:'"omit" | "same-origin" | "include"'}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Controls whether or not the browser sends credentials (defaults to 'include')"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.customfetch",children:"customFetch?"})}),(0,s.jsx)(t.td,{children:"(input: Request, options?: RequestInit) => Promise<Response>"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Enables overriding the default fetch function with a custom implementation."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.customheaders",children:"customHeaders?"})}),(0,s.jsx)(t.td,{children:"Record<string, string>"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," An object of key value pairs which represent headers to attach when sending a POST request, only works for POST"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.dontretrystatuscodes",children:"dontRetryStatusCodes?"})}),(0,s.jsx)(t.td,{children:"number[]"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," List of HTTP response status codes for which events sent to Collector should not be retried in future request. Only non-success status codes are considered (greater or equal to 300). The don't retry codes are only considered for GET and POST requests. By default, the tracker retries on all non-success status codes except for 400, 401, 403, 410, and 422 (these don't retry codes will remain even if you set your own ",(0,s.jsx)("code",{children:"dontRetryStatusCodes"})," but can be changed using the ",(0,s.jsx)("code",{children:"retryStatusCodes"}),")."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.eventmethod",children:"eventMethod?"})}),(0,s.jsx)(t.td,{children:"EventMethod"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," The preferred technique to use to send events"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.eventstore",children:"eventStore?"})}),(0,s.jsx)(t.td,{children:"EventStore"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Enables providing a custom EventStore implementation to store events before sending them to the collector."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.idservice",children:"idService?"})}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Id service full URL. This URL will be added to the queue and will be called using a GET method. This option is there to allow the service URL to be called in order to set any required identifiers e.g. extra cookies.The request respects the ",(0,s.jsx)("code",{children:"anonymousTracking"})," option, including the SP-Anonymous header if needed, and any additional custom headers from the customHeaders option."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.keepalive",children:"keepalive?"})}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Indicates that the request should be allowed to outlive the webpage that initiated it. Enables collector requests to complete even if the page is closed or navigated away from. Note: Browsers put a limit on keepalive requests of 64KB. In case of multiple keepalive requests in parallel (may happen in case of multiple trackers), the limit is shared."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.maxgetbytes",children:"maxGetBytes?"})}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," The max size a GET request (its complete URL) can be. Requests over this size will be tried as a POST request."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.maxpostbytes",children:"maxPostBytes?"})}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," The max size a POST request can be before the tracker will force send it Also dictates the max size of a POST request before a batch of events is split into multiple requests"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.onrequestfailure",children:"onRequestFailure?"})}),(0,s.jsx)(t.td,{children:"(data: RequestFailure, response?: Response) => void"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," A callback function to be executed whenever a request fails to be sent to the collector. This is the inverse of the onRequestSuccess callback, so any non 2xx status code will trigger this callback."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.onrequestsuccess",children:"onRequestSuccess?"})}),(0,s.jsx)(t.td,{children:"(data: EventBatch, response: Response) => void"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," A callback function to be executed whenever a request is successfully sent to the collector. In practice this means any request which returns a 2xx status code will trigger this callback."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.postpath",children:"postPath?"})}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," The post path which events will be sent to. Ensure your collector is configured to accept events on this post path"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.retryfailedrequests",children:"retryFailedRequests?"})}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Whether to retry failed requests to the collector.Failed requests are requests that failed due to [timeouts](",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout%5C_event",children:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout\\_event"}),"), [network errors](",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error%5C_event",children:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error\\_event"}),"), and [abort events](",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort%5C_event",children:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\\_event"}),").Takes precedent over ",(0,s.jsx)("code",{children:"retryStatusCodes"})," and ",(0,s.jsx)("code",{children:"dontRetryStatusCodes"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.retrystatuscodes",children:"retryStatusCodes?"})}),(0,s.jsx)(t.td,{children:"number[]"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," List of HTTP response status codes for which events sent to Collector should be retried in future requests. Only non-success status codes are considered (greater or equal to 300). The retry codes are only considered for GET and POST requests. They take priority over the ",(0,s.jsx)("code",{children:"dontRetryStatusCodes"})," option. By default, the tracker retries on all non-success status codes except for 400, 401, 403, 410, and 422."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.usestm",children:"useStm?"})}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("i",{children:"(Optional)"})," Should the Sent Timestamp be attached to events. Only applies for GET events."]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>a,a:()=>i});var s=r(67294);const n={},o=s.createContext(n);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);