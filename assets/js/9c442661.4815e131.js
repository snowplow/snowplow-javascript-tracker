"use strict";(self.webpackChunkapi_docs=self.webpackChunkapi_docs||[]).push([[70241],{43271:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var o=t(85893),n=t(11151);const s={},a=void 0,c={id:"node-tracker/markdown/node-tracker.emitterconfigurationbase.retrystatuscodes",title:"node-tracker.emitterconfigurationbase.retrystatuscodes",description:"Home &gt; @snowplow/node-tracker &gt; EmitterConfigurationBase &gt; retryStatusCodes",source:"@site/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.retrystatuscodes.md",sourceDirName:"node-tracker/markdown",slug:"/node-tracker/markdown/node-tracker.emitterconfigurationbase.retrystatuscodes",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.retrystatuscodes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"node-tracker.emitterconfigurationbase.retryfailedrequests",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.retryfailedrequests"},next:{title:"node-tracker.emitterconfigurationbase.usestm",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.usestm"}},i={},d=[{value:"EmitterConfigurationBase.retryStatusCodes property",id:"emitterconfigurationbaseretrystatuscodes-property",level:2}];function u(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/",children:"Home"})," > ",(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker",children:"@snowplow/node-tracker"})," > ",(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase",children:"EmitterConfigurationBase"})," > ",(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.retrystatuscodes",children:"retryStatusCodes"})]}),"\n",(0,o.jsx)(r.h2,{id:"emitterconfigurationbaseretrystatuscodes-property",children:"EmitterConfigurationBase.retryStatusCodes property"}),"\n",(0,o.jsxs)(r.p,{children:["List of HTTP response status codes for which events sent to Collector should be retried in future requests. Only non-success status codes are considered (greater or equal to 300). The retry codes are only considered for GET and POST requests. They take priority over the ",(0,o.jsx)(r.code,{children:"dontRetryStatusCodes"})," option. By default, the tracker retries on all non-success status codes except for 400, 401, 403, 410, and 422."]}),"\n",(0,o.jsx)("b",{children:"Signature:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"retryStatusCodes?: number[];\n"})})]})}function p(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},11151:(e,r,t)=>{t.d(r,{Z:()=>c,a:()=>a});var o=t(67294);const n={},s=o.createContext(n);function a(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);