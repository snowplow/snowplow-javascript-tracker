"use strict";(self.webpackChunkapi_docs=self.webpackChunkapi_docs||[]).push([[73972],{80945:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var o=r(85893),n=r(11151);const s={},a=void 0,c={id:"node-tracker/markdown/node-tracker.emitterconfigurationbase.dontretrystatuscodes",title:"node-tracker.emitterconfigurationbase.dontretrystatuscodes",description:"Home &gt; @snowplow/node-tracker &gt; EmitterConfigurationBase &gt; dontRetryStatusCodes",source:"@site/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.dontretrystatuscodes.md",sourceDirName:"node-tracker/markdown",slug:"/node-tracker/markdown/node-tracker.emitterconfigurationbase.dontretrystatuscodes",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.dontretrystatuscodes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"node-tracker.emitterconfigurationbase.customheaders",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.customheaders"},next:{title:"node-tracker.emitterconfigurationbase.eventmethod",permalink:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.eventmethod"}},d={},i=[{value:"EmitterConfigurationBase.dontRetryStatusCodes property",id:"emitterconfigurationbasedontretrystatuscodes-property",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/",children:"Home"})," > ",(0,o.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker",children:"@snowplow/node-tracker"})," > ",(0,o.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase",children:"EmitterConfigurationBase"})," > ",(0,o.jsx)(t.a,{href:"/snowplow-javascript-tracker/docs/node-tracker/markdown/node-tracker.emitterconfigurationbase.dontretrystatuscodes",children:"dontRetryStatusCodes"})]}),"\n",(0,o.jsx)(t.h2,{id:"emitterconfigurationbasedontretrystatuscodes-property",children:"EmitterConfigurationBase.dontRetryStatusCodes property"}),"\n",(0,o.jsxs)(t.p,{children:["List of HTTP response status codes for which events sent to Collector should not be retried in future request. Only non-success status codes are considered (greater or equal to 300). The don't retry codes are only considered for GET and POST requests. By default, the tracker retries on all non-success status codes except for 400, 401, 403, 410, and 422 (these don't retry codes will remain even if you set your own ",(0,o.jsx)(t.code,{children:"dontRetryStatusCodes"})," but can be changed using the ",(0,o.jsx)(t.code,{children:"retryStatusCodes"}),")."]}),"\n",(0,o.jsx)("b",{children:"Signature:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"dontRetryStatusCodes?: number[];\n"})})]})}function l(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>c,a:()=>a});var o=r(67294);const n={},s=o.createContext(n);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);