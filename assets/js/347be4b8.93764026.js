"use strict";(self.webpackChunkapi_docs=self.webpackChunkapi_docs||[]).push([[60531],{18570:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var o=t(85893),n=t(11151);const c={},a=void 0,i={id:"browser-tracker/markdown/browser-tracker.conditionalcontextprovider",title:"browser-tracker.conditionalcontextprovider",description:"Home &gt; @snowplow/browser-tracker &gt; ConditionalContextProvider",source:"@site/docs/browser-tracker/markdown/browser-tracker.conditionalcontextprovider.md",sourceDirName:"browser-tracker/markdown",slug:"/browser-tracker/markdown/browser-tracker.conditionalcontextprovider",permalink:"/snowplow-javascript-tracker/docs/browser-tracker/markdown/browser-tracker.conditionalcontextprovider",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"browser-tracker.commoneventproperties.timestamp",permalink:"/snowplow-javascript-tracker/docs/browser-tracker/markdown/browser-tracker.commoneventproperties.timestamp"},next:{title:"browser-tracker.contextevent.event",permalink:"/snowplow-javascript-tracker/docs/browser-tracker/markdown/browser-tracker.contextevent.event"}},s={},d=[{value:"ConditionalContextProvider type",id:"conditionalcontextprovider-type",level:2}];function p(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/browser-tracker/markdown/",children:"Home"})," > ",(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/browser-tracker/markdown/browser-tracker",children:"@snowplow/browser-tracker"})," > ",(0,o.jsx)(r.a,{href:"/snowplow-javascript-tracker/docs/browser-tracker/markdown/browser-tracker.conditionalcontextprovider",children:"ConditionalContextProvider"})]}),"\n",(0,o.jsx)(r.h2,{id:"conditionalcontextprovider-type",children:"ConditionalContextProvider type"}),"\n",(0,o.jsx)(r.p,{children:"Conditional context providers are two element arrays used to decide when to attach contexts, where: - the first element is some conditional criterion - the second element is any number of context primitives"}),"\n",(0,o.jsx)("b",{children:"Signature:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"type ConditionalContextProvider = FilterProvider | RuleSetProvider;\n"})})]})}function l(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},11151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>a});var o=t(67294);const n={},c=o.createContext(n);function a(e){const r=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(c.Provider,{value:r},e.children)}}}]);